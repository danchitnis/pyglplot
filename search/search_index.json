{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pyglplot","title":"pyglplot","text":"<p>A powerful Python plotting library that leverages OpenGL to provide exceptional performance and high-quality visualizations of 2D data. Based on the JavaScript library webgl-plot this library is specifically designed for real-time plotting of line, scatter, and histogram plots. This library is cross-platform and works on Windows, Linux and Mac thanks to GLFW windowing library. Furthermore, It is also compatible with Jupyter notebooks. This package is ideal for plotting realtime data from sensors and instruments, including streaming devices such as microphones and cameras, empowering users to analyze data as it is being generated.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>python -m pip install pyglplot\n</code></pre>"},{"location":"#getting-started","title":"Getting started","text":"<pre><code>import numpy as np\nfrom pyglplot import line\n# Create a Line object\nLINE_SIZE = 2000\nLINE_NUMBER = 1\nplot_line = line.Line(LINE_SIZE, LINE_NUMBER)\nx = np.linspace(-1, 1, LINE_SIZE)\ny = np.sin(np.pi*x)\n# Add data to the line\nplot_line.update_color(0, [255, 0, 255])\nplot_line.update_line_xy(0, x, y)\nplot_line.run()\n</code></pre>"},{"location":"#animating-a-plot","title":"Animating a plot","text":"<pre><code>import numpy as np\nfrom pyglplot import line\n# Create a Line object\nLINE_SIZE = 2000\nLINE_NUMBER = 1\nplot_line = line.Line(LINE_SIZE, LINE_NUMBER)\nx = np.linspace(-1, 1, LINE_SIZE)\ny = np.sin(np.pi*x)\n# Add data to the line\nplot_line.update_color(0, [255, 0, 255])\nplot_line.update_line_xy(0, x, y)\ndef update():\ny = 0.5*np.sin(np.pi*x) + np.random.rand(LINE_SIZE) * 0.1\nplot_line.update_line_y(0, y)\nplot_line.run(update)\n</code></pre>"},{"location":"#license","title":"License","text":"<p>MIT</p>"},{"location":"API/line/","title":"pyglplot.line","text":"<p>A simple xy line plotter.</p> <p>Parameters:</p> Name Type Description Default <code>line_size</code> <p>number of points in the line</p> <code>100</code> <code>line_number</code> <p>number of lines</p> <code>1</code> <code>width</code> <p>window width</p> <code>1280</code> <code>height</code> <p>window height</p> <code>800</code> <code>title</code> <p>window title</p> <code>'pyglplot'</code> <code>context_api</code> <p>OpenGL windowing method: \"native\", \"egl\", \"osmesa\", or \"auto\"</p> <code>'native'</code>"},{"location":"API/line/#pyglplot.line.Line.run","title":"<code>run(update_function=_update_empty)</code>","text":"<p>refresh the window and run the update function. This function will block the main thread until the window is closed.</p> <p>Parameters:</p> Name Type Description Default <code>update_function</code> <p>function to run at each refresh</p> <code>_update_empty</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"API/line/#pyglplot.line.Line.update_color","title":"<code>update_color(index_line, rgb)</code>","text":"<p>update the color of a line</p> <p>Parameters:</p> Name Type Description Default <code>index_line</code> <code>int</code> <p>index of the line to update</p> required <code>rgb</code> <code>np.ndarray</code> <p>color of the line in numpy array of (3,) with values between 0 and 255. e.g. np.array([255, 0, 0]) for red</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API/line/#pyglplot.line.Line.update_line_x","title":"<code>update_line_x(index_line, x)</code>","text":"<p>update the x values of a line</p> <p>Parameters:</p> Name Type Description Default <code>index_line</code> <code>int</code> <p>index of the line to update</p> required <code>x</code> <code>np.ndarray</code> <p>x values of the line in format of numpy array (x0, x1, x2, ...)</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API/line/#pyglplot.line.Line.update_line_xy","title":"<code>update_line_xy(index_line, x, y)</code>","text":"<p>update the x and y values of a line</p> <p>Parameters:</p> Name Type Description Default <code>index_line</code> <code>int</code> <p>index of the line to update</p> required <code>x</code> <code>np.ndarray</code> <p>x values of the line in format of numpy array (x0, x1, x2, ...)</p> required <code>y</code> <code>np.ndarray</code> <p>y values of the line in format of numpy array (y0, y1, y2, ...)</p> required"},{"location":"API/line/#pyglplot.line.Line.update_line_y","title":"<code>update_line_y(index_line, y)</code>","text":"<p>update the y values of a line</p> <p>Parameters:</p> Name Type Description Default <code>index_line</code> <code>int</code> <p>index of the line to update</p> required <code>y</code> <code>np.ndarray</code> <p>y values of the line in format of numpy array (y0, y1, y2, ...)</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API/roll/","title":"pyglplot.roll","text":"<p>Class to plot a rolling graph</p> <p>Parameters:</p> Name Type Description Default <code>roll_buffer_size</code> <p>number of points to plot</p> <code>100</code> <code>num_lines</code> <p>number of lines to plot</p> <code>1</code> <code>width</code> <p>window width</p> <code>1280</code> <code>height</code> <p>window height</p> <code>800</code> <code>title</code> <p>window title</p> <code>'pyglplot'</code> <code>context_api</code> <p>OpenGL windowing method: \"native\", \"egl\", \"osmesa\", or \"auto\"</p> <code>'native'</code>"},{"location":"API/roll/#pyglplot.roll.Roll.add_point","title":"<code>add_point(y)</code>","text":"<p>Add a point to the plot</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <p>y value to plot</p> required"},{"location":"API/roll/#pyglplot.roll.Roll.run","title":"<code>run(update_function)</code>","text":"<p>Run the plot</p> <p>Parameters:</p> Name Type Description Default <code>update_function</code> <p>function to call to update the plot</p> required"},{"location":"API/roll/#pyglplot.roll.Roll.update_line_color","title":"<code>update_line_color(index_line, color)</code>","text":"<p>Update the color of a line</p> <p>Parameters:</p> Name Type Description Default <code>index_line</code> <p>index of the line to update</p> required <code>color</code> <code>np.ndarray</code> <p>numpy array of 3 uint8 values (RGB) between 0 and 255 e.g.</p> required"},{"location":"API/scatter/","title":"pyglplot.scatter","text":"<p>Scatter plot class</p> <p>Parameters:</p> Name Type Description Default <code>max_square_num</code> <p>Maximum number of squares to be drawn, defaults to 100</p> <code>100</code> <code>square_size</code> <p>Size of the square, defaults to 0.1</p> <code>0.1</code> <code>width</code> <p>Width of the window, defaults to 1280</p> <code>1280</code> <code>height</code> <p>Height of the window, defaults to 800</p> <code>800</code> <code>title</code> <p>Title of the window, defaults to \"pyglplot\"</p> <code>'pyglplot'</code> <code>context_api</code> <p>OpenGL windowing method: \"native\", \"egl\", \"osmesa\", or \"auto\"</p> <code>'native'</code>"},{"location":"API/scatter/#pyglplot.scatter.Scatter.add_point","title":"<code>add_point(pos)</code>","text":"<p>Add a point to the plot.</p> <p>Parameters:</p> Name Type Description Default <code>pos</code> <code>np.ndarray</code> <p>The position of the point to add.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API/scatter/#pyglplot.scatter.Scatter.add_pos_and_color","title":"<code>add_pos_and_color(pos, color)</code>","text":"<p>Add a point and its color to the plot.</p> <p>Parameters:</p> Name Type Description Default <code>pos</code> <code>np.ndarray</code> <p>The position of the point to add.</p> required <code>color</code> <code>np.ndarray</code> <p>The color of the point to add.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API/scatter/#pyglplot.scatter.Scatter.reset_color","title":"<code>reset_color()</code>","text":"<p>Reset the colors of all points to zero.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API/scatter/#pyglplot.scatter.Scatter.reset_pos","title":"<code>reset_pos()</code>","text":"<p>Reset the positions of all points to zero.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"API/scatter/#pyglplot.scatter.Scatter.run","title":"<code>run(update_function=_update_empty)</code>","text":"<p>Run the plot.</p> <p>Parameters:</p> Name Type Description Default <code>update_function</code> <p>The function to call to update the plot.</p> <code>_update_empty</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"}]}